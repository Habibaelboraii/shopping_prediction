# -*- coding: utf-8 -*-
"""Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ni5500gqo-EWm4a5RPcqEM7vNleaukR7

## IMPORT LIBS
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

## LOAD DATASET"""

df=pd.read_csv('online_shoppers_intention.csv')

## EDA"""

df.head()

df['ProductRelated_Duration'].value_counts()

sns.histplot(data=df,x='ProductRelated_Duration',hue='Revenue')
plt.show()

df.shape

df['VisitorType'].value_counts()

sns.countplot(x='VisitorType',data=df)
plt.show()

sns.countplot(x='VisitorType',hue='Revenue',data=df)
plt.show()

sns.countplot(x='Weekend',data=df)
plt.show()

sns.countplot(x='Weekend',hue='Revenue',data=df)
plt.show()

sns.countplot(x='Month',hue='Revenue',data=df)
plt.show()

sns.histplot(x='PageValues',hue='Revenue',data=df)
plt.show()

df['PageValues'].value_counts()

sns.countplot(x='SpecialDay',hue='Revenue',data=df)
plt.show()

sns.histplot(x='ProductRelated_Duration',data=df)
plt.show()

df['SpecialDay'].value_counts()

sns.countplot(x='OperatingSystems',hue='Revenue',data=df)
plt.show()

df.info()

df.isnull().sum()

df.describe()

df['Revenue'].value_counts()

df.duplicated().sum()

sns.boxplot(x='Administrative',data=df)
plt.show()

sns.boxplot(x='Administrative_Duration',data=df)
plt.show()

sns.boxplot(x='Informational_Duration',data=df)
plt.show()

sns.boxplot(x='ProductRelated_Duration',data=df)
plt.show()

sns.pairplot(data=df)
plt.show()

## preprocessing

### 1- feature selection


df.head()

df.drop(columns=['Administrative','Administrative_Duration','Informational','Informational_Duration','TrafficType','OperatingSystems','Browser','Region'],inplace=True)

df.head()

#df.columns

### 2- drop duplicates"""

df=df.drop_duplicates()

df.duplicated().sum()

### 3- remove outlier"""

df.describe()

sns.boxplot(x='ProductRelated',data=df)
plt.show()

#ProductRelated
Q1=df['ProductRelated'].quantile(.25)
Q3=df['ProductRelated'].quantile(.75)

IQR =Q3-Q1

lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

df= df[(df['ProductRelated'] >= lower_bound) & (df['ProductRelated'] <= upper_bound)]

sns.boxplot(x='ProductRelated',data=df)
plt.show()

sns.boxplot(x='ProductRelated_Duration',data=df)
plt.show()

#ProductRelated_Duration
Q1=df['ProductRelated_Duration'].quantile(.25)
Q3=df['ProductRelated_Duration'].quantile(.75)

IQR =Q3-Q1

lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

df= df[(df['ProductRelated_Duration'] >= lower_bound) & (df['ProductRelated_Duration'] <= upper_bound)]

sns.boxplot(x='ProductRelated_Duration',data=df)
plt.show()

df.describe()

### 4- Encoding"""

df.info()

from sklearn.preprocessing import LabelEncoder

le=LabelEncoder()

df['Month']=le.fit_transform(df['Month'])
df['VisitorType']=le.fit_transform(df['VisitorType'])
df['Revenue']=le.fit_transform(df['Revenue'])
df['Weekend']=le.fit_transform(df['Weekend'])

df.info()

### 5-split data"""

sns.countplot(x='Revenue',data=df)
plt.show()

x=df.drop(columns=['Revenue'])
y=df['Revenue']

df.head(11)

df.tail(11)

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test=train_test_split(x,y,
                                              test_size=.2,
                                              random_state=42)

### 5- Imbalance data"""

from imblearn.over_sampling import SMOTE

df['Revenue'].value_counts()

sm=SMOTE()

x_train,y_train=sm.fit_resample(x_train,y_train)

y_train.value_counts()

x_train.head(5)

df= pd.DataFrame(x_train, columns=x.columns)
df['Revenue'] = y_train

df.head()

sns.countplot(x='Revenue',data=df)
plt.show()

## classification model

###  random forest


from sklearn.ensemble import RandomForestClassifier

rf=RandomForestClassifier(n_estimators=500,
    max_depth=10,
    min_samples_split=5,
    min_samples_leaf=2,
    max_features='sqrt',
    class_weight='balanced'
)

rf.fit(x_train,y_train)

rf_pred=rf.predict(x_test)

from sklearn.metrics import accuracy_score,classification_report,confusion_matrix

print('accuracy test :',accuracy_score(y_test,rf_pred) *100 ,'%')

rf_pred_train=rf.predict(x_train)

print(classification_report(y_test,rf_pred))

cm=confusion_matrix(y_test,rf_pred)

#cm

sns.heatmap(cm,annot=True)
plt.show()



import pickle

# بعد تدريب الموديل
rf.fit(x_train, y_train)

# حفظ الموديل
with open("Rondom Forest_model.pkl", "wb") as f:
    pickle.dump(rf, f)

# ## GUI ##
import streamlit as st
import pandas as pd
import pickle

# تحميل الموديل
model = pickle.load(open("Rondom Forest_model.pkl", "rb"))

st.title("🛒 Online Shopper Intention Prediction")

with st.form("input_form"):
    st.write("Enter the values of features: ")
    ProductRelated_Duration = st.number_input("ProductRelated_Duration", min_value=0.0, max_value=6000.0, value=0.0, key='prd')
    ProductRelated = st.number_input("ProductRelated", min_value=0, max_value=500, value=0, key='pr')
    BounceRates = st.number_input("BounceRates", min_value=0.0, max_value=1.0, value=0.0, key='br')
    ExitRates = st.number_input("ExitRates", min_value=0.0, max_value=1.0, value=0.0, key='er')
    PageValues = st.number_input("PageValues", min_value=0.0, max_value=500.0, value=0.0, key='pv')
    SpecialDay = st.slider("SpecialDay", 0.0, 1.0, 0.0, key='sd')
    Month = st.selectbox("Month", ["Feb", "Mar", "May", "June", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], key='mo')
    VisitorType = st.selectbox("VisitorType", ["Returning_Visitor", "New_Visitor", "Other"], key='vt')
    Weekend = st.selectbox("Weekend", [0, 1], key='we')


   
    submitted = st.form_submit_button("Predict")

if submitted:
   
    from sklearn.preprocessing import LabelEncoder

    
    le_month = LabelEncoder()
    le_month.fit(["Feb","Mar","May","June","Jul","Aug","Sep","Oct","Nov","Dec"])
    Month_encoded = le_month.transform([Month])[0]

    le_visitor = LabelEncoder()
    le_visitor.fit(["Returning_Visitor", "New_Visitor", "Other"])
    VisitorType_encoded = le_visitor.transform([VisitorType])[0]

    Weekend_encoded = int(Weekend)  

    
    input_data = pd.DataFrame({
        "ProductRelated_Duration": [ProductRelated_Duration],
        "ProductRelated": [ProductRelated],
        "BounceRates": [BounceRates],
        "ExitRates": [ExitRates],
        "PageValues": [PageValues],
        "SpecialDay": [SpecialDay],
        "Month": [Month_encoded],
        "VisitorType": [VisitorType_encoded],
        "Weekend": [Weekend_encoded]
    })

    
    prediction = model.predict(input_data)[0]
    if prediction == 1:
        st.success("✅ The client will purchase the products")
    else:
        st.error("❌ The client will NOT purchase the products")
